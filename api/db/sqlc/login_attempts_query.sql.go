// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: login_attempts_query.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createLoginAttempts = `-- name: CreateLoginAttempts :exec
INSERT INTO "login_attempts" (user_id) VALUES ($1)
`

func (q *Queries) CreateLoginAttempts(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, createLoginAttempts, userID)
	return err
}

const deleteLoginAttempt = `-- name: DeleteLoginAttempt :exec
DELETE FROM "login_attempts" WHERE user_id = $1
`

func (q *Queries) DeleteLoginAttempt(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteLoginAttempt, userID)
	return err
}

const getLoginAttempt = `-- name: GetLoginAttempt :one
SELECT
    attempts,
    last_failed_login_date
FROM "login_attempts"
WHERE
    user_id = $1
`

type GetLoginAttemptRow struct {
	Attempts            int32     `json:"attempts"`
	LastFailedLoginDate time.Time `json:"last_failed_login_date"`
}

func (q *Queries) GetLoginAttempt(ctx context.Context, userID uuid.UUID) (GetLoginAttemptRow, error) {
	row := q.db.QueryRowContext(ctx, getLoginAttempt, userID)
	var i GetLoginAttemptRow
	err := row.Scan(&i.Attempts, &i.LastFailedLoginDate)
	return i, err
}

const getLoginAttempts = `-- name: GetLoginAttempts :many
SELECT user_id, attempts, last_failed_login_date FROM "login_attempts"
`

func (q *Queries) GetLoginAttempts(ctx context.Context) ([]LoginAttempts, error) {
	rows, err := q.db.QueryContext(ctx, getLoginAttempts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LoginAttempts
	for rows.Next() {
		var i LoginAttempts
		if err := rows.Scan(&i.UserID, &i.Attempts, &i.LastFailedLoginDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLoginFullAttempt = `-- name: GetLoginFullAttempt :one
SELECT user_id, attempts, last_failed_login_date FROM "login_attempts" WHERE user_id = $1
`

func (q *Queries) GetLoginFullAttempt(ctx context.Context, userID uuid.UUID) (LoginAttempts, error) {
	row := q.db.QueryRowContext(ctx, getLoginFullAttempt, userID)
	var i LoginAttempts
	err := row.Scan(&i.UserID, &i.Attempts, &i.LastFailedLoginDate)
	return i, err
}

const incrementLoginAttemptCounter = `-- name: IncrementLoginAttemptCounter :exec
UPDATE "login_attempts"
SET
    attempts = attempts + 1,
    last_failed_login_date = CURRENT_TIMESTAMP
WHERE
    user_id = $1
`

func (q *Queries) IncrementLoginAttemptCounter(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, incrementLoginAttemptCounter, userID)
	return err
}

const resetLoginAttempts = `-- name: ResetLoginAttempts :exec
UPDATE "login_attempts" SET attempts = 0 WHERE user_id = $1
`

func (q *Queries) ResetLoginAttempts(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, resetLoginAttempts, userID)
	return err
}
