// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tokens_query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createTokens = `-- name: CreateTokens :one
INSERT INTO
    "tokens" (
        user_id, access_token, refresh_token
    )
VALUES ($1, $2, $3) RETURNING user_id, access_token, refresh_token, updated_at
`

type CreateTokensParams struct {
	UserID       uuid.UUID `json:"user_id"`
	AccessToken  string    `json:"access_token"`
	RefreshToken string    `json:"refresh_token"`
}

func (q *Queries) CreateTokens(ctx context.Context, arg CreateTokensParams) (Tokens, error) {
	row := q.db.QueryRowContext(ctx, createTokens, arg.UserID, arg.AccessToken, arg.RefreshToken)
	var i Tokens
	err := row.Scan(
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTokens = `-- name: DeleteTokens :one
DELETE FROM "tokens" WHERE user_id = $1 RETURNING user_id, access_token, refresh_token, updated_at
`

func (q *Queries) DeleteTokens(ctx context.Context, userID uuid.UUID) (Tokens, error) {
	row := q.db.QueryRowContext(ctx, deleteTokens, userID)
	var i Tokens
	err := row.Scan(
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTokens = `-- name: UpdateTokens :one
UPDATE "tokens"
SET
    access_token = $2,
    refresh_token = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE
    user_id = $1 RETURNING user_id, access_token, refresh_token, updated_at
`

type UpdateTokensParams struct {
	UserID       uuid.UUID `json:"user_id"`
	AccessToken  string    `json:"access_token"`
	RefreshToken string    `json:"refresh_token"`
}

func (q *Queries) UpdateTokens(ctx context.Context, arg UpdateTokensParams) (Tokens, error) {
	row := q.db.QueryRowContext(ctx, updateTokens, arg.UserID, arg.AccessToken, arg.RefreshToken)
	var i Tokens
	err := row.Scan(
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.UpdatedAt,
	)
	return i, err
}
