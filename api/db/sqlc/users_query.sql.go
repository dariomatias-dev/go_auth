// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users_query.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    "users" (
        name, age, email, password, roles
    )
VALUES ($1, $2, $3, $4, $5) RETURNING id
`

type CreateUserParams struct {
	Name     string   `json:"name"`
	Age      int32    `json:"age"`
	Email    string   `json:"email"`
	Password string   `json:"password"`
	Roles    []string `json:"roles"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Age,
		arg.Email,
		arg.Password,
		pq.Array(arg.Roles),
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "users" WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, age, email, valid_email, password, roles, created_at, updated_at FROM "users" WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (Users, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.Email,
		&i.ValidEmail,
		&i.Password,
		pq.Array(&i.Roles),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, age, email, valid_email, password, roles, created_at, updated_at FROM "users" WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (Users, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.Email,
		&i.ValidEmail,
		&i.Password,
		pq.Array(&i.Roles),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT
    id,
    name,
    age,
    email,
    roles,
    created_at,
    updated_at
FROM "users"
`

type GetUsersRow struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Age       int32     `json:"age"`
	Email     string    `json:"email"`
	Roles     []string  `json:"roles"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Age,
			&i.Email,
			pq.Array(&i.Roles),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "users"
SET
    name = COALESCE($2, name),
    age = COALESCE($3, age),
    email = COALESCE($4, email),
    valid_email = COALESCE(
        $5, valid_email
    ),
    password = COALESCE(
        $6, password
    ),
    roles = COALESCE($7, roles),
    updated_at = CURRENT_TIMESTAMP
WHERE
    id = $1
`

type UpdateUserParams struct {
	ID         uuid.UUID      `json:"id"`
	Name       sql.NullString `json:"name"`
	Age        sql.NullInt32  `json:"age"`
	Email      sql.NullString `json:"email"`
	ValidEmail sql.NullBool   `json:"valid_email"`
	Password   sql.NullString `json:"password"`
	Roles      []string       `json:"roles"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Age,
		arg.Email,
		arg.ValidEmail,
		arg.Password,
		pq.Array(arg.Roles),
	)
	return err
}
